from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from config import TOKEN, ADMINS, ON_BUTTON, OFF_BUTTON  # import config

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

busy = False
user = {
    'id': '',
    'first_name': '',
    'last_name': '',
    'username': ''
}

bs_on = KeyboardButton(ON_BUTTON)
bs_off = KeyboardButton(OFF_BUTTON)

bs_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(
    bs_on, bs_off
)


# function to set up current user name and ID
def set_user_name(message):
    global user

    user['id'] = message.from_user.id
    if message.from_user.first_name is not None:
        user['first_name'] = message.from_user.first_name
    else:
        user['first_name'] = ''

    if message.from_user.last_name is not None:
        user['last_name'] = message.from_user.last_name
    else:
        user['last_name'] = ''

    if message.from_user.username is not None:
        user['username'] = '(@' + message.from_user.username + ')'
    else:
        user['username'] = ''


# START command handler
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    set_user_name(message)

    await message.answer(f'''–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
{user['first_name']} {user['last_name']} {user['username']}''', reply_markup=bs_markup)


# HELP command handler
@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–ë–æ—Ç —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–∏—Å–∞ BrowserStack.")


# message handler
@dp.message_handler()
async def echo(message: types.Message):
    global busy
    global user

    # TURN ON and NOT BUSY
    if (message.text == ON_BUTTON and busy is not True):
        set_user_name(message)
        await message.answer(f"""üëç  –†–∞–±–æ—Ç–∞ —Å BrowserStack –ù–ê–ß–ê–¢–ê.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {user['first_name']} {user['last_name']} {user['username']}
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è""")

        busy = True

    # TURN ON and BUSY
    elif (message.text == ON_BUTTON and busy is True):
        await message.answer(f"""üö´  –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º BrowserStack. 

–í –¥–∞–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 
{user['first_name']} {user['last_name']} {user['username']} 
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è""")

    # TURN OFF and NOT BUSY
    elif (message.text == OFF_BUTTON and busy is not True):
        await message.answer("""üü¢   –°–µ—Ä–≤–∏—Å BrowserStack –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–≤–æ–±–æ–¥–µ–Ω.
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è""")

    # TURN OFF
    elif (message.text == OFF_BUTTON):

        # right user, ok to turn off
        if (message.from_user.id == user['id']):
            await message.answer(f"""üÜó  –†–∞–±–æ—Ç–∞ —Å BrowserStack –ó–ê–ö–û–ù–ß–ï–ù–ê.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {user['first_name']} {user['last_name']} {user['username']}
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è""")

            busy = False

        # wrong user, unable to turn off
        else:
            await message.answer(f"""üö´  üö´–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É
—Å —Å–µ—Ä–≤–∏—Å–æ–º BrowserStack.

–í –¥–∞–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 
{user['first_name']} {user['last_name']} {user['username']} 
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è""")

    # any other message
    else:
        # only those who are in ADMINS group are allowed to post messages
        if (message.from_user.id not in ADMINS):
            await bot.delete_message(message.chat.id, message.message_id)
            await message.answer('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É', reply_markup=bs_markup)


if __name__ == '__main__':
    executor.start_polling(dp)
